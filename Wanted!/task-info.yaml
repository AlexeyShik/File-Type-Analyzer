type: edu
custom_name: stage3
files:
- name: test/MainTest.java
  visible: false
  text: |2

    import analyzer.Main;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testcase.TestCase;
    import org.junit.AfterClass;
    import org.junit.BeforeClass;

    import java.io.File;
    import java.io.IOException;
    import java.lang.management.ManagementFactory;
    import java.nio.file.Files;
    import java.nio.file.Paths;
    import java.util.List;
    import java.util.function.Function;

    public class MainTest extends StageTest<Clue> {
        private static final String CURRENT_DIR = System.getProperty("user.dir") + File.separator;
        private static int startedThreadCount = 0;

        public MainTest() throws Exception {
            super(Main.class);
        }

        @Override
        public List<TestCase<Clue>> generate() {
            return List.of(
                    //Testing basic cases
                    new TestCase<Clue>()
                            .addArguments(new String[]
                                    {"test_files", "%PDF-", "PDF document"})
                            .addFile("test_files" + File.separator + "doc.pdf", "PFDF%PDF-PDF")
                            .addFile("test_files" + File.separator + "text.txt", "PF%PDF-PDFABC")
                            .setAttach(new Clue("doc.pdf: PDF document\n" +
                                    "text.txt: PDF document", 2, "The files had following content: " + "\n" +
                                    "\"PFDF%PDF-PDF\", \"PF%PDF-PDFABC\" and were analyzed for pattern \"%PDF-\"")),

                    new TestCase<Clue>()
                            .addArguments(new String[]
                                    {"test_files", "-----BEGIN\\CERTIFICATE-----", "PEM certificate"})
                            .addFile("test_files" + File.separator + "file.pem", "PF-----BEGIN\\CERTIFICATE-----DF%PDF-PDF")
                            .addFile("test_files" + File.separator + "file.pdf", "PF%P-----BEGIN\\CERTIFICATE-----DF-PDF")
                            .setAttach(new Clue("file.pdf: PEM certificate\n" +
                                    "file.pem: PEM certificate", 2, "")),

                    //Testing with only one file in the directory
                    new TestCase<Clue>()
                            .addArguments(new String[]
                                    {"test_files", "-----BEGIN\\CERTIFICATE-----", "PEM certificate"})
                            .addFile("test_files" + File.separator + "the_only_file.pem", "PF-----BEGIN\\CERTIFICATE-----DF%PDF-PDF")
                            .setAttach(new Clue("the_only_file.pem: PEM certificate", 1, "")),

                    //Testing with 10 files in the directory
                    new TestCase<Clue>()
                            .addArguments(new String[]
                                    {"test_files", "%txt-", "TXT document"})
                            .addFile("test_files" + File.separator + "doc0.pdf", "PFDF%PDF%txt-PDF")
                            .addFile("test_files" + File.separator + "doc1.pdf", "PF%PDF%txt-PDF")
                            .addFile("test_files" + File.separator + "doc2.pdf", "PFDF%PDF%txt-PF")
                            .addFile("test_files" + File.separator + "doc3.pdf", "PF%PF%txt-PDF")
                            .addFile("test_files" + File.separator + "doc4.pdf", "PFDF%PDF%txt-PDF")
                            .addFile("test_files" + File.separator + "doc5.pdf", "PF%PDF%txt-PDF")
                            .addFile("test_files" + File.separator + "doc6.pdf", "PFF%PDF%txt-PDF")
                            .addFile("test_files" + File.separator + "doc7.pdf", "PF%DF%txt-PDF")
                            .addFile("test_files" + File.separator + "doc8.pdf", "PFDF%PDFPDF")
                            .addFile("test_files" + File.separator + "doc9.txt", "PF%PDF%PDF")
                            .setAttach(new Clue("doc0.pdf: TXT document\n" +
                                    "doc1.pdf: TXT document\n" +
                                    "doc2.pdf: TXT document\n" +
                                    "doc3.pdf: TXT document\n" +
                                    "doc4.pdf: TXT document\n" +
                                    "doc5.pdf: TXT document\n" +
                                    "doc6.pdf: TXT document\n" +
                                    "doc7.pdf: TXT document\n" +
                                    "doc8.pdf: Unknown file type\n" +
                                    "doc9.txt: Unknown file type", 10, ""))
            );
        }

        @Override
        public CheckResult check(String reply, Clue clue) {
            long currentThreads = ManagementFactory.getThreadMXBean().getTotalStartedThreadCount();
            long startedThisTestThread = currentThreads - startedThreadCount;

            long neededThreads = startedThreadCount + clue.threadsStarted;
            long startedThisTestNeededThreads = neededThreads - startedThreadCount;

            Function<Long, String> threadName = count ->
                    count + " thread" + (count == 1 ? "" : "s");

            if (startedThisTestThread < startedThisTestNeededThreads) {
                return CheckResult.wrong(
                        "There were not enough Threads started, " +
                                "you should process each file in a different Thread. " +
                                "\nYou started " + threadName.apply(startedThisTestThread) + ", " +
                                "but you need to start " + threadName.apply(startedThisTestNeededThreads) + ". " +
                                "\nThe executor.invokeAll() method might help. Also, don't forget to call .shutdown()."
                );
            }

            startedThreadCount = (int) currentThreads;

            String[] expectedLines = clue.output.split("\n");
            String actual = reply.strip();

            if (actual.isEmpty()) {
                return CheckResult.wrong("No output (check if you exited " +
                        "from main too early, you should wait until all threads are finishes)");
            }

            int expectedLinesLength = expectedLines.length;

            if (actual.trim().split("\n").length != expectedLines.length) {
                return CheckResult.wrong(String.format("There is should be %d lines in the output when you check %d files!\nMake sure you don't print empty lines.", expectedLinesLength, expectedLinesLength));
            }

            for (String expectedLine : expectedLines) {
                if (!actual.toLowerCase().contains(expectedLine.toLowerCase())) {
                    return new CheckResult(false, "Can't find the line '"
                            + expectedLine + "' in the output!");
                }
            }

            return CheckResult.correct();
        }

        @BeforeClass
        public static void generateTestFilesDirectory() {
            try {
                Files.deleteIfExists(Paths.get(CURRENT_DIR + "test_files"));
            } catch (IOException ex) {
                ex.printStackTrace();
            }
            try {
                Files.createDirectory(Paths.get(CURRENT_DIR + "test_files"));
            } catch (IOException ex) {
                ex.printStackTrace();
            }
        }

        @BeforeClass
        public static void countThreadsBefore() {
            startedThreadCount += ManagementFactory.getThreadMXBean().getTotalStartedThreadCount();
        }

        @AfterClass
        public static void deleteTestFilesDirectory() {
            try {
                Files.deleteIfExists(Paths.get(CURRENT_DIR + "test_files"));
            } catch (IOException ex) {
                ex.printStackTrace();
            }
        }

    }
  learner_created: false
- name: test/ContainsSearch.java
  visible: false
  text: |
    public class ContainsSearch {
        public static long searchForPattern(String[] args) {
            String pattern = args[1];
            String patternName = args[2];
            String fileContent = args[0];
            String unknownFileType = "Unknown file type";
            long timeStart = System.nanoTime();
            if (fileContent.contains(pattern) /*!kmpSearch(fileContent.toString(), pattern).isEmpty()*/) {
                return System.nanoTime() - timeStart;
            }
            return 0;
        }
    }
  learner_created: false
- name: test/NaiveSearch.java
  visible: false
  text: |2


    public class NaiveSearch {
        public static long searchForPattern(String[] args) {
            String pattern = args[1];
            String fileContent = args[0];
            long timeStart = System.nanoTime();
            if (naiveSearch(fileContent, pattern)) {
                return System.nanoTime() - timeStart;
            }
            return 0;
        }


        public static boolean naiveSearch (String text, String pattern) {
            int textLength = text.length();
            int patternLength = pattern.length();
            for (int i = 0; i<textLength - patternLength + 1; i++) {
                for (int j = 0; j< patternLength; j++) {
                    if (!(text.charAt(i+j) == pattern.charAt(j))) {
                        break;
                    }
                    else if (j == patternLength -1) return true;
                }
            }
            return false;
        }
    }
  learner_created: false
- name: src/analyzer/Main.java
  visible: true
  text: |
    package analyzer;

    public class Main {
        public static void main(String[] args) {
            System.out.println("Hello World!");
        }
    }
  learner_created: false
- name: test/FileTypeAnalyzerTest.java
  visible: false
  text: |2

    import analyzer.Main;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testcase.TestCase;

    import java.util.List;

    class Clue {
        String response;
        String feedback;

        Clue(String response, String feedback) {
            this.response = response;
            this.feedback = feedback;
        }
    }

    public class FileTypeAnalyzerTest extends StageTest<Clue> {
        public FileTypeAnalyzerTest() {
            super(Main.class);
        }

        @Override
        public List<TestCase<Clue>> generate() {
            return List.of(
                new TestCase<Clue>()
                    .addArguments(new String[]
                        {"doc.pdf", "%PDF-", "PDF document"})
                    .addFile("doc.pdf", "PFDF%PDF-PDF")
                    .setAttach(new Clue("PDF document", "The file had following content: " +
                        "PFDF%PDF-PDF and was analyzed for pattern %PDF-")),

                new TestCase<Clue>()
                    .addArguments(new String[]
                        {"doc.txt", "%PDF-", "PDF document"})
                    .addFile("doc.txt", "PFDF%PDF-PDF")
                    .setAttach(new Clue("PDF document", "The file had following content: " +
                        "PFDF%PDF-PDF and was analyzed for pattern %PDF-")),

                new TestCase<Clue>()
                    .addArguments(new String[]
                        {"doc.pdf", "%PDF-", "PDF document"})
                    .addFile("doc.pdf", "PFDFPDF")
                    .setAttach(new Clue("Unknown file type", "The file had following content: " +
                        "PFDFPDF and was analyzed for pattern %PDF-")),

                new TestCase<Clue>()
                    .addArguments(new String[]
                        {"doc.txt", "%PDF-", "PDF document"})
                    .addFile("doc.txt", "PFDFPDF")
                    .setAttach(new Clue("Unknown file type", "The file had following content: " +
                        "PFDFPDF and was analyzed for pattern %PDF-")),



                new TestCase<Clue>()
                    .addArguments(new String[]
                        {"doc.pdf", "%DOC-", "DOC document"})
                    .addFile("doc.pdf", "PFDF%DOC-PDF")
                    .setAttach(new Clue("DOC document", "The file had following content: " +
                        "PFDF%PDF-PDF and was analyzed for pattern %PDF-")),

                new TestCase<Clue>()
                    .addArguments(new String[]
                        {"doc.txt", "%DOC-", "DOC document"})
                    .addFile("doc.txt", "PFDF%DOC-PDF")
                    .setAttach(new Clue("DOC document", "")),

                new TestCase<Clue>()
                    .addArguments(new String[]
                        {"doc.pdf", "%DOC-", "DOC document"})
                    .addFile("doc.pdf", "PFDFPDF")
                    .setAttach(new Clue("Unknown file type", "")),

                new TestCase<Clue>()
                    .addArguments(new String[]
                        {"doc.txt", "%DOC-", "DOC document"})
                    .addFile("doc.txt", "PFDFPDF")
                    .setAttach(new Clue("Unknown file type", ""))
            );
        }

        @Override
        public CheckResult check(String reply, Clue clue) {
            String actual = reply.strip();
            String expected = clue.response.strip();
            return new CheckResult(actual.equals(expected),
                clue.feedback + "\nExpected result: " + expected +
                    "\nActual result: " + actual);
        }
    }
  learner_created: false
- name: src/analyzer/InputSource.java
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/projects/64/stages/345/implement
status: Solved
feedback:
  message: Congratulations! Continue on <a href="https://hyperskill.org/projects/64/stages/345/implement">JetBrains
    Academy</a>
  time: Sat, 25 Jul 2020 11:00:38 UTC
record: 3
